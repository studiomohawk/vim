#!/bin/bash
set -e

help () {
    cat<<EOF

Usage: quick-vim [install|upgrade|help]

Commands:

    install    installs from the git repo
    upgrade    clobbers existing setup and installs fresh from git
    help       print this msg

EOF
}

TARGET=$PWD

test () {
  # A=${TARGET}/vim/bundle
  # B="/Users/studiomohawk/Dropbox/Source/playground/quick-vim/vim/bundle"
  # if [ "$A" == "$B" ]
  # then
  #  echo 'same'
  # fi
  # echo 'cd into ${TARGET}'
  # cd ./vim/bundle/

  FILE="./.bundles"
  while read -r line; do
    [[ "$line" =~ ^#.*$ ]] && continue
      REPONAME=$(basename ${line})
      BUNDLE=$(echo ${REPONAME%.*})
      if [ -d ./vim/bundle/${BUNDLE} ]
      then
        echo -e "${REPONAME} already exsist, skipping..."
      else
        cd ./vim/bundle
        echo ${line}
        git clone $line
        cd ../..
      fi
  done < "$FILE"
}

# copy in pathogen and then clone in bundles
install () {
    # if ./vim/bundle is exist
    # else create one
    if [ -e ${TARGET}/vim/bundle ]
    then
      echo './vim/bundle exists. Move on...'
    else
      echo 'Creating ./vim/bundle for you.'
      mkdir -p ${TARGET}/vim/bundle
    fi
    # add in bundles from bundle.txt
    FILE="./.bundles"
    while read -r line; do
      [[ "$line" =~ ^#.*$ ]] && continue
        REPONAME=$(basename ${line})
        BUNDLE=$(echo ${REPONAME%.*})
        if [ -d ./vim/bundle/${BUNDLE} ]
        then
          echo -e "${REPONAME} already exsist, skipping..."
        else
          cd ./vim/bundle
          echo ${line}
          git clone $line
          cd ../..
        fi
    done < "$FILE"
}

# kills everything, pulls latest from git, installs it
upgrade () {
  find ./vim/bundle/ -type d -name .git \
  | xargs -n 1 dirname \
  | sort \
  | while read line; do echo $line && cd $line && git pull; done
}

# fucking cryptic bash, test for a valid arg and execute it if so; otherwise show the help
if [ "$1" != "" ]; then
    wl=(install upgrade help test)
    for i in "${wl[@]}"
    do
        if [ "$i" == "$1" ]
        then
            $1
            exit 0
        fi
    done
fi

# show a flailer some help
help 
exit 0
